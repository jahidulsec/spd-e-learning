generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  sap_id       String        @id @unique @db.VarChar(10)
  password     String?       @db.VarChar(255)
  full_name    String        @db.VarChar(100)
  mobile       String        @unique @db.VarChar(20)
  role         role          @default(mios)
  status       status?       @default(active)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  otp          otp[]
  team_members team_members?
}

enum role {
  superadmin
  mios
  team_lead
  director
}

enum status {
  active
  inactive
}

model otp {
  id         String   @id @default(uuid())
  user_id    String   @db.VarChar(100)
  code       String   @db.VarChar(6)
  expires_at DateTime @db.Timestamp(5)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user users @relation(fields: [user_id], references: [sap_id], onDelete: Cascade)
}

// team
model teams {
  id           String         @id @default(uuid())
  title        String         @db.VarChar(50)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  team_members team_members[]
  category     category[]
  campaign     campaign[]
}

model team_members {
  id         String   @id @default(uuid())
  team_id    String   @db.VarChar(100)
  user_id    String   @unique @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user              users?              @relation(fields: [user_id], references: [sap_id], onDelete: Cascade)
  team              teams               @relation(fields: [team_id], references: [id], onDelete: Cascade)
  result            result[]
  e_detailing_video e_detailing_video[]
  e_detailing_score e_detailing_score[]
}

// content
model category {
  id         String   @id @default(uuid())
  title      String   @db.VarChar(150)
  team_id    String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  team   teams    @relation(fields: [team_id], references: [id], onDelete: Cascade)
  folder folder[]
}

model folder {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(150)
  category_id String   @db.VarChar(100)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  file     file[]
}

model file {
  id         String   @id @default(uuid())
  title      String   @db.VarChar(150)
  filename   String   @db.VarChar(100)
  file_type  String   @db.VarChar(100)
  folder_id  String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  folder folder @relation(fields: [folder_id], references: [id], onDelete: Cascade)
}

// quiz
model campaign {
  id         String   @id @default(uuid())
  title      String   @db.VarChar(150)
  team_id    String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  team        teams         @relation(fields: [team_id], references: [id], onDelete: Cascade)
  quiz        quiz[]
  e_detailing e_detailing[]
}

model quiz {
  id          String   @id @default(uuid())
  campaign_id String   @db.VarChar(100)
  title       String   @db.VarChar(150)
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  campaign campaign   @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  question question[]
}

model question {
  id         String   @id @default(uuid())
  quiz_id    String   @db.VarChar(100)
  question   String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  quiz        quiz          @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  quiz_option quiz_option[]
}

model quiz_option {
  id          String   @id @default(uuid())
  question_id String   @db.VarChar(100)
  option      String   @db.VarChar(100)
  is_correct  Boolean? @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  question question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  result   result[]
}

model result {
  id             String   @id @default(uuid())
  team_member_id String   @db.VarChar(100)
  answer_id      String   @db.VarChar(100)
  score          Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  team_member team_members @relation(fields: [team_member_id], references: [id], onDelete: Cascade)
  answer      quiz_option  @relation(fields: [answer_id], references: [id], onDelete: Cascade)
}

// e-detailing
model e_detailing {
  id                 String   @id @default(uuid())
  campaign_id        String   @db.VarChar(100)
  title              String   @db.VarChar(150)
  description        String?  @db.VarChar(255)
  deadline           DateTime @db.Timestamp(6)
  score_starting     Decimal  @db.Decimal
  score_content      Decimal  @db.Decimal
  score_presentation Decimal  @db.Decimal
  score_closing      Decimal  @db.Decimal
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  campaign          campaign            @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  e_detailing_video e_detailing_video[]
}

model e_detailing_video {
  id             String   @id @default(uuid())
  e_detailing_id String   @db.VarChar(100)
  team_member_id String   @db.VarChar(100)
  title          String   @db.VarChar(150)
  description    String?  @db.Text
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  e_detailing       e_detailing         @relation(fields: [e_detailing_id], references: [id], onDelete: Cascade)
  team_member       team_members        @relation(fields: [team_member_id], references: [id], onDelete: Cascade)
  e_detailing_score e_detailing_score[]
}

model e_detailing_score {
  id                 Int      @id
  video_id           String   @db.VarChar(100)
  score_starting     Decimal  @db.Decimal
  score_content      Decimal  @db.Decimal
  score_presentation Decimal  @db.Decimal
  score_closing      Decimal  @db.Decimal
  comment            String?
  scored_by          String?  @db.VarChar(100)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  team_lead         team_members?     @relation(fields: [scored_by], references: [id], onDelete: SetNull)
  e_detailing_video e_detailing_video @relation(fields: [video_id], references: [id], onDelete: Cascade)
}
