generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  sap_id       String         @id @unique @db.VarChar(10)
  password     String?        @db.VarChar(255)
  full_name    String         @db.VarChar(100)
  mobile       String         @unique @db.VarChar(20)
  role         role           @default(mios)
  status       status?        @default(active)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  otp          otp[]
  team_members team_members[]
}

model otp {
  id         String   @id @default(uuid())
  user_id    String   @db.VarChar(100)
  code       String   @db.VarChar(6)
  expires_at DateTime @default(now()) @db.Timestamp(5)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       users    @relation(fields: [user_id], references: [sap_id], onDelete: Cascade)

  @@index([user_id], map: "otp_user_id_fkey")
}

model teams {
  id           String         @id @default(uuid())
  title        String         @db.VarChar(50)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  category     category[]
  e_detailing  e_detailing[]
  quiz         quiz[]
  team_members team_members[]
}

model team_members {
  id                String              @id @default(uuid())
  team_id           String              @db.VarChar(100)
  user_id           String              @db.VarChar(100)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  e_detailing_score e_detailing_score[]
  e_detailing_video e_detailing_video[]
  quiz_member       quiz_member[]
  result            result[]
  team              teams               @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user              users               @relation(fields: [user_id], references: [sap_id], onDelete: Cascade)

  @@unique([team_id, user_id])
  @@index([user_id], map: "team_members_user_id_fkey")
}

model quater {
  id          String        @id @default(uuid())
  title       String        @db.VarChar(150)
  start_date  DateTime
  end_date    DateTime
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  is_archived Boolean?      @default(false)
  category    category[]
  e_detailing e_detailing[]
  quiz        quiz[]
}

model category {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(150)
  team_id     String   @db.VarChar(100)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  quater_id   String   @default("1") @db.VarChar(100)
  is_archived Boolean? @default(false)
  team        teams    @relation(fields: [team_id], references: [id], onDelete: Cascade)
  quater      quater   @relation(fields: [quater_id], references: [id], onUpdate: Restrict, map: "fk_category_quater_id")
  folder      folder[]

  @@index([team_id], map: "category_team_id_fkey")
  @@index([quater_id], map: "category_quater")
}

model folder {
  id               String   @id @default(uuid())
  title            String   @db.VarChar(150)
  category_id      String   @db.VarChar(100)
  parent_folder_id String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  is_archived      Boolean? @default(false)
  file             file[]
  category         category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  parent_folder    folder?  @relation("SubFolder", fields: [parent_folder_id], references: [id])
  sub_folder       folder[] @relation("SubFolder")

  @@index([category_id], map: "folder_category_id_fkey")
  @@index([parent_folder_id], map: "folder_parent_folder_id_fkey")
}

model file {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(150)
  filename    String   @unique @db.VarChar(100)
  file_type   String   @db.VarChar(100)
  folder_id   String   @db.VarChar(100)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_archived Boolean? @default(false)
  folder      folder   @relation(fields: [folder_id], references: [id], onDelete: Cascade)

  @@index([folder_id], map: "file_folder_id_fkey")
}

model quiz {
  id          String        @id @default(uuid())
  quater_id   String        @db.VarChar(100)
  title       String        @db.VarChar(150)
  team_id     String        @db.VarChar(100)
  description String?       @db.VarChar(255)
  start_date  DateTime
  end_date    DateTime
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  status      status?       @default(active)
  is_archived Boolean?      @default(false)
  question    question[]
  quater      quater        @relation(fields: [quater_id], references: [id], onDelete: Cascade)
  team        teams         @relation(fields: [team_id], references: [id], onDelete: Cascade)
  quiz_member quiz_member[]

  @@index([quater_id], map: "quiz_quater_id_fkey")
  @@index([team_id], map: "quiz_team_id_fkey")
}

model quiz_member {
  id             String       @id @default(uuid())
  quiz_id        String       @db.VarChar(100)
  team_member_id String       @db.VarChar(100)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  quiz           quiz         @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  team_member    team_members @relation(fields: [team_member_id], references: [id], onDelete: Cascade)

  @@unique([quiz_id, team_member_id])
  @@index([team_member_id], map: "quiz_member_team_member_id_fkey")
}

model question {
  id          String        @id @default(uuid())
  quiz_id     String        @db.VarChar(100)
  title       String        @db.VarChar(255)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  quiz        quiz          @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  quiz_option quiz_option[]
  result      result?

  @@index([quiz_id], map: "question_quiz_id_fkey")
}

model quiz_option {
  id          String   @id @default(uuid())
  question_id String   @db.VarChar(100)
  title       String   @db.VarChar(100)
  is_correct  Boolean? @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  question    question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  result      result?

  @@index([question_id], map: "quiz_option_question_id_fkey")
}

model result {
  id             String       @id @default(uuid())
  team_member_id String       @db.VarChar(100)
  answer_id      String       @unique @db.VarChar(100)
  question_id    String       @unique @db.VarChar(100)
  score          Int?         @default(0)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  answer         quiz_option  @relation(fields: [answer_id], references: [id], onDelete: Cascade)
  question       question     @relation(fields: [question_id], references: [id], onDelete: Cascade)
  team_member    team_members @relation(fields: [team_member_id], references: [id], onDelete: Cascade)

  @@index([team_member_id], map: "result_team_member_id_fkey")
}

model e_detailing {
  id                 String              @id @default(uuid())
  quater_id          String              @db.VarChar(100)
  title              String              @db.VarChar(150)
  team_id            String              @db.VarChar(100)
  description        String?             @db.VarChar(255)
  end_date           DateTime            @default(dbgenerated("('0000-00-00 00:00:00.000000')")) @db.Timestamp(6)
  score_starting     Decimal             @db.Decimal(10, 0)
  score_content      Decimal             @db.Decimal(10, 0)
  score_presentation Decimal             @db.Decimal(10, 0)
  score_closing      Decimal             @db.Decimal(10, 0)
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  start_date         DateTime            @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
  is_archived        Boolean?            @default(false)
  quater             quater              @relation(fields: [quater_id], references: [id], onDelete: Cascade)
  team               teams               @relation(fields: [team_id], references: [id], onDelete: Cascade)
  e_detailing_video  e_detailing_video[]

  @@index([quater_id], map: "e_detailing_quater_id_fkey")
  @@index([team_id], map: "e_detailing_team_id_fkey")
}

model e_detailing_video {
  id                String             @id @default(uuid())
  e_detailing_id    String             @db.VarChar(100)
  team_member_id    String             @db.VarChar(100)
  title             String             @db.VarChar(150)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  filename          String             @db.VarChar(150)
  e_detailing_score e_detailing_score?
  e_detailing       e_detailing        @relation(fields: [e_detailing_id], references: [id], onUpdate: Restrict)
  team_member       team_members       @relation(fields: [team_member_id], references: [id], onDelete: Cascade)

  @@index([team_member_id], map: "e_detailing_video_team_member_id_fkey")
  @@index([e_detailing_id], map: "e_detailing_video_e_detailing_id_fkey")
}

model e_detailing_score {
  id                 String            @id @default(uuid())
  video_id           String            @unique(map: "video_id_unique") @db.VarChar(100)
  score_starting     Decimal           @db.Decimal(10, 0)
  score_content      Decimal           @db.Decimal(10, 0)
  score_presentation Decimal           @db.Decimal(10, 0)
  score_closing      Decimal           @db.Decimal(10, 0)
  comment            String?
  scored_by          String?           @db.VarChar(100)
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  team_lead          team_members?     @relation(fields: [scored_by], references: [id])
  e_detailing_video  e_detailing_video @relation(fields: [video_id], references: [id], onDelete: Cascade)

  @@index([scored_by], map: "e_detailing_score_scored_by_fkey")
}

enum role {
  superadmin
  mios
  team_lead
  director
}

enum status {
  active
  inactive
}
